// Part of <https://miracle.systems/p/walkner-snf> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = (app, module) =>
{
  const {sio, messengerClient} = module;

  module.setTagValue = setTagValue;

  sio.sockets.on('connection', (socket) =>
  {
    socket.on('controller.setTagValue', handleSetTagValueMessage.bind(null, socket));
  });

  function handleSetTagValueMessage(socket, tagName, tagValue, reply)
  {
    if (!_.isFunction(reply))
    {
      reply = () => {};
    }

    if (!canManageSettings(socket))
    {
      reply(app.createError('Not allowed.', 'TAG_WRITE_NO_PERM'));

      return;
    }

    const oldValue = module.values[tagName];

    setTagValue(tagName, tagValue, (err, tag) =>
    {
      reply(err);

      if (err)
      {
        module.error(err, `Failed to set tag.`, {
          tagName,
          tagValue
        });

        return;
      }

      module.info(`Tag value set.`, {
        tagName,
        tagValue
      });

      app.broker.publish(`controller.${tag.kind === 'setting' ? 'settingChanged' : 'tagValueSet'}`, {
        severity: 'debug',
        user: socket.handshake.user,
        tag: tagName,
        newValue: tagValue,
        oldValue: oldValue
      });
    });
  }

  function setTagValue(tagName, tagValue, done)
  {
    if (!_.isString(tagName))
    {
      done(app.createError('Tag name must be a string.', 'TAG_WRITE_INVALID_NAME'));

      return;
    }

    const tag = module.tags[tagName];

    if (!tag)
    {
      done(app.createError('Unknown tag.', 'TAG_WRITE_UNKNOWN'));

      return;
    }

    if (!tag.writable)
    {
      done(app.createError('Tag is not writable.', 'TAG_WRITE_NOT_WRITABLE'));

      return;
    }

    if (!_.isString(tagValue)
      && !_.isNumber(tagValue)
      && !_.isBoolean(tagValue)
      && typeof tagValue !== 'object')
    {
      done(app.createError(
        'Tag value must be an object, a string, a number or a boolean.',
        'TAG_WRITE_INVALID_VALUE'
      ));

      return;
    }

    messengerClient.request(
      'modbus.setTagValue',
      {name: tagName, value: tagValue},
      (err) => done(err, tag)
    );
  }

  function canManageSettings(socket)
  {
    const {headers, user} = socket.handshake;

    if (user && (user.super || user.local || _.includes(user.privileges, 'SETTINGS:MANAGE')))
    {
      return true;
    }

    if (headers && _.isString(headers['user-agent']) && headers['user-agent'].includes('X11; Linux'))
    {
      return true;
    }

    return false;
  }
};
