// Part of <https://miracle.systems/p/walkner-snf> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = (app, module) =>
{
  const {messengerClient} = module;

  app.broker.subscribe('modbus.tagsChanged', handleTagsChangedMessage);
  app.broker.subscribe('modbus.tagValuesChanged', handleTagValuesChangedMessage);

  app.broker
    .subscribe('messenger.client.connected', sync)
    .setFilter(m => m.socketType === 'req' && m.moduleName === module.config.messengerClientId);

  if (messengerClient.isConnected())
  {
    sync();
  }

  function sync()
  {
    messengerClient.request('modbus.sync', null, (err, res) =>
    {
      if (err)
      {
        module.error(`Failed to sync: ${err.message}`);
      }

      if (!_.isObject(res))
      {
        return;
      }

      if (res.tags)
      {
        module.info('Synced tag definitions.');

        handleTagsChangedMessage(res.tags);
      }

      if (res.values)
      {
        module.info('Synced tag values.');

        handleTagValuesChangedMessage(res.values);
      }
    });
  }

  function handleTagsChangedMessage(tags)
  {
    if (!_.isObject(tags))
    {
      return;
    }

    module.tags = tags;

    app.broker.publish('controller.tagsChanged', _.values(tags));
  }

  function handleTagValuesChangedMessage(values)
  {
    if (!_.isObject(values))
    {
      return;
    }

    _.forEach(values, function(tagValue, tagName)
    {
      module.values[tagName] = tagValue;

      const tag = module.tags[tagName];

      if (tag)
      {
        tag.value = tagValue;
      }
    });

    values['@timestamp'] = Date.now();

    app.broker.publish('controller.tagValuesChanged', values);
  }
};
