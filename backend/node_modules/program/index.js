// Part of <https://miracle.systems/p/walkner-snf> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const Watchdog = require('./Watchdog');
const ProgramManager = require('./ProgramManager');
const TestManager = require('./TestManager');

exports.DEFAULT_CONFIG = {
  modbusId: 'modbus',
  messengerServerId: 'messenger/server'
};

exports.models = [
  require('snf-programs/models/snfProgram'),
  require('snf-tests/models/snfTest')
];

exports.requiredModules = 'modbus';

exports.start = (app, module) =>
{
  const modbus = app[module.config.modbusId];
  let execQueue = null;

  module.exec = (func, name) =>
  {
    if (execQueue === null)
    {
      execQueue = {};

      process.nextTick(() =>
      {
        const queue = execQueue;

        execQueue = null;

        _.forEach(queue, (func) => { func(); });
      });
    }

    execQueue[name || func.name] = func;
  };

  app.onModuleReady(module.config.messengerServerId, () =>
  {
    app[module.config.messengerServerId].handle('snf.tests.getData', (data, reply) =>
    {
      if (module.testManager)
      {
        reply({
          currentTest: module.testManager.currentTest,
          lastTest: module.testManager.lastTest
        });
      }
      else
      {
        reply({
          currentTest: null,
          lastTest: null
        });
      }
    });
  });

  const masterStatusTag = 'masters.controlProcess';
  let initProgramSub = null;

  if (module.config.simulate || modbus.values[masterStatusTag])
  {
    initWatchdog();
  }
  else
  {
    app.broker
      .subscribe(`tagValueChanged.${masterStatusTag}`, initWatchdog)
      .setLimit(1);
  }

  function initWatchdog()
  {
    module.watchdog = new Watchdog(app);

    if (modbus.values['watchdog'])
    {
      return initProgram();
    }

    initProgramSub = app.broker.subscribe('tagValueChanged.watchdog', initProgram);
  }

  function initProgram(message)
  {
    if (!message || message.newValue)
    {
      if (initProgramSub)
      {
        initProgramSub.cancel();
        initProgramSub = null;
      }

      module.programManager = new ProgramManager(app);
      module.testManager = new TestManager(app);
    }
  }
};
