// Part of <https://miracle.systems/p/walkner-snf> licensed under <CC BY-NC-SA 4.0>

'use strict';

const util = require('util');
const step = require('h5.step');
const ControlUnit = require('./ControlUnit');

module.exports = TestManager;

function TestManager(app)
{
  ControlUnit.call(this, app.broker, app.modbus, app.program, 'test');

  this.Test = app.mongoose.model('SnfTest');
  this.Program = app.mongoose.model('SnfProgram');

  this.currentTest = null;
  this.lastTest = null;
  this.tags = null;
  this.tagCollectionTimer = null;

  this.watch(['contactors.2', '.success', '.failure'], 'manageTest');
  this.watch(['.failure.current', '.failure.light', '.failure.time', '.failure.bulbHolder'], 'handleFailure');
}

util.inherits(TestManager, ControlUnit);

TestManager.prototype.manageTest = function()
{
  const lock = this.lock('manageTest');

  if (lock.isLocked())
  {
    lock.cb = this.manageTest.bind(this);

    return;
  }

  lock.on();

  if (this.getTagValue('contactors.2'))
  {
    return this.beginTest(lock);
  }

  return setTimeout(this.finishTest.bind(this, new Date(), lock), 1000);
};

TestManager.prototype.beginTest = function(lock)
{
  if (this.currentTest)
  {
    this.warn("Trying to begin a test, but one is already running?");

    return lock.off();
  }

  const currentProgram = this.program.programManager.getCurrentProgram();

  if (!currentProgram)
  {
    this.warn("Trying to begin a test, but there is no program selected!");

    return lock.off();
  }

  this.currentTest = new this.Test({
    startedAt: new Date(),
    finishedAt: null,
    program: currentProgram.toJSON(),
    result: false,
    currentPassed: true,
    lightPassed: true,
    timePassed: true,
    bulbHolderPassed: true,
    tags: {},
    extremes: {
      minLight1: this.getTagValue('light.1.min.pc'),
      minLight2: this.getTagValue('light.2.min.pc'),
      minCurrent: this.getTagValue('program.current.min'),
      maxCurrent: this.getTagValue('program.current.max')
    },
    prodLine: this.getTagValue('prodLine'),
    orderNo: this.getTagValue('currentOrder') || '',
    serialNo: 0
  });

  this.startCollectingTags();

  this.broker.publish('snf.tests.started', this.currentTest.toJSON());

  this.debug("Test started...", {programName: currentProgram.name});

  return lock.off();
};

TestManager.prototype.handleFailure = function()
{
  if (!this.currentTest)
  {
    return;
  }

  if (this.getTagValue('.failure.current'))
  {
    this.currentTest.currentPassed = false;
  }

  if (this.getTagValue('.failure.light'))
  {
    this.currentTest.lightPassed = false;
  }

  if (this.getTagValue('.failure.time'))
  {
    this.currentTest.timePassed = false;
  }

  if (this.getTagValue('.failure.bulbHolder'))
  {
    this.currentTest.bulbHolderPassed = false;
  }
};

TestManager.prototype.finishTest = function(finishedAt, lock)
{
  if (!this.currentTest)
  {
    this.warn("Trying to finish a test, but no test was running?");

    return lock.off();
  }

  this.stopCollectingTags();

  const currentTest = this.currentTest;

  currentTest.set({
    finishedAt,
    result: currentTest.currentPassed && currentTest.lightPassed && currentTest.timePassed,
    tags: this.tags
  });

  this.currentTest = null;
  this.tags = null;

  currentTest.save((err) =>
  {
    this.lastTest = null;

    if (err)
    {
      this.error(err, "Failed to save the current test.");

      this.broker.publish('snf.tests.finished', null);
    }
    else
    {
      this.debug("Test completed.", {result: currentTest.result});

      this.lastTest = currentTest._id.toString();
    }

    this.broker.publish('snf.tests.finished', this.lastTest);

    return lock.off();
  });
};

TestManager.prototype.startCollectingTags = function()
{
  this.tags = {
    temperature: [],
    light1: [],
    light2: [],
    current: [],
    voltage: []
  };

  this.tagCollectionTimer = setInterval(this.collectTags.bind(this), 1000);

  this.collectTags();
};

TestManager.prototype.collectTags = function()
{
  this.tags.temperature.push(this.getTagValue('temperature'));
  this.tags.light1.push(this.getTagValue('light.1'));
  this.tags.light2.push(this.getTagValue('light.2'));
  this.tags.current.push(this.getTagValue('current'));
  this.tags.voltage.push(this.getTagValue('voltage'));
};

TestManager.prototype.stopCollectingTags = function()
{
  clearInterval(this.tagCollectionTimer);
  this.tagCollectionTimer = null;
};
